// WARNING: Do NOT edit the input and output ports in this file in a text
// editor if you plan to continue editing the block that represents it in
// the Block Editor! File corruption is VERY likely to occur.

// Copyright (C) 1991-2009 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.


// Generated by Quartus II 64-Bit Version 9.0 (Build Build 132 02/25/2009)
// Created on Thu Apr 29 18:08:58 2021

//  Module Declaration
module block_name
(
	// {{ALTERA_ARGS_BEGIN}} DO NOT REMOVE THIS LINE!
	clk, p, clkout, Z, y
	// {{ALTERA_ARGS_END}} DO NOT REMOVE THIS LINE!
);
// Port Declaration

	// {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	input clk;
	input [8:0] p;
	output clkout;	
	output Z;
	output [14:0] y;
	// {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!
	integer pc=1;//счётчик тактов
	reg [14:0] y;
	integer ii;
	wire clkout;
	reg Z=0;
	assign clkout=!clk;
	always @(posedge clk)
	
	begin
y=15'b000000000000000;

case(pc)
1:begin
//y=15'b000000000000111;
y[0]=1; y[1]=1; y[2]=1;
pc=pc+1;
end

2:begin
//if (p[3]==1)
//begin
//y=15'b000000001110000;
//y[3]=1; y[4]=1; y[5]=1; y[6]=1;
//pc=pc+1;
//end else
//begin
y[4]=1; y[5]=1; y[6]=1;
pc=pc+1;
//end
end

3:begin
//y=15'b000000000000010;
y[1]=1;
pc=pc+1;
end

4:begin
if (p[0]==0)
begin
//y=15'b000000100000000;
y[8]=1;
pc=50;
end else 
if (p[1]==0)//(p[0]==1&p[1]==0)
begin
//y=15'b010000000000100;
y[2]=1; y[13]=1;
pc=10;
//Z=1;
//pc=50;
end else
//if (p[0]==1&p[1]==1&p[3]==1)
begin
//y[4]=1;
//pc=pc+1;
//end else
//begin
//y=15'b000000000011000;
y[3]=1; y[4]=1;
pc=pc+1;
end
end

5:begin
y=15'b000000000000000;
if (p[4]==1)
begin
//y=15'b000000010000000;
y[7]=1;
pc=50;
end else
if (p[5]==1)//(p[4]==0&p[5]==1)
begin
//y=15'b010000000000100;
y[2]=1; y[13]=1;
Z=1;
pc=50;
end else
if (p[2]==0)//(p[4]==0&p[5]==0&p[2]==0)
begin
//y=15'b000010001000000;
y[6]=1; y[10]=1;
pc=pc+1;
end else
begin
//y=15'b000011001000000;
y[6]=1; y[10]=1; y[9]=1;
pc=pc+1;
end
if (p[6]==1)
ii=1;
end

6:begin
//y=15'b10000000000000;
y[14]=1;
pc=pc+1;
end

7:begin
y=15'b000000000000000;
if (p[8]==0)
begin
pc=5;
end else
if (p[7]==0)//(p[8]==1&p[7]==0)
begin
//y=15'b000100000000000;
y[11]=1;
pc=pc+1;
pc=8;
end else
if (p[6]==1)//(p[8]==1&p[7]==1&p[6]==1)
begin
//y=15'b010000000000100;
y[2]=1; y[13]=1;
Z=1;
pc=50;
end else 
//if (p[8]==1&p[7]==1&p[6]==0)
begin
Z=1;
//y=15'b001000000000000;
y[12]=1;
pc=50;
end
end

8:begin
if (p[4]==1)
begin
y[7]=1;
//y=15'b000000010000000;
pc=50;
end else
//if (ii==1)//(p[4]==0&ii==1)
//begin
//y=15'b010000000000100;
//y[2]=1; y[13]=1;
//Z=1;
//pc=pc+2;
//end else
begin
Z=1;
y=15'b001000000000000;
y[12]=1;
//y=15'b000000000000000;
pc=50;
end
end
9: 
	begin
	y=15'b000000000000000;
	Z = 1;
	end

10: begin
	y[12]=1;
	pc = 9;
	end
default y=15'b000000000000000;
endcase;
end
endmodule
