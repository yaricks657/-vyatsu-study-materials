#include <iostream>
#include <chrono>
#include <vector>
#include <complex>
#include <fstream>
#include <thread>
#include <pvm3.h>

using namespace std;

typedef complex<double> base;


int range = 100000

int rev(int num, int lg_n) {		//begining of good realisation
	int res = 0;
	for (int i = 0; i < lg_n; ++i)
		if (num & (1 << i))
			res |= 1 << (lg_n - 1 - i);
	return res;
}

void good_realisation(vector<base>& a, bool invert) {
	int n = (int)a.size();
	int lg_n = 0;
	while ((1 << lg_n) < n)  ++lg_n;

	for (int i = 0; i < n; ++i)
		if (i < rev(i, lg_n))
			swap(a[i], a[rev(i, lg_n)]);

	for (int len = 2; len <= n; len <<= 1) {
		double ang = 2 * 3.14 / len * (invert ? -1 : 1);
		base wlen(cos(ang), sin(ang));
		for (int i = 0; i < n; i += len) {
			base w(1);
			for (int j = 0; j < len / 2; ++j) {
				base u = a[i + j], v = a[i + j + len / 2] * w;
				a[i + j] = u + v;
				a[i + j + len / 2] = u - v;
				w *= wlen;
			}
		}
	}
	if (invert)
		for (int i = 0; i < n; ++i)
			a[i] /= n;
}

void good_multiplication(const vector<int>& a, const vector<int>& b, vector<int>& res, int number) {		//multiplication of two vectors
		vector<base> fa(a.begin(), a.end()), fb(b.begin(), b.end());
		int n = 1;
		while (n < max(a.size(), b.size()))  n <<= 1;
		n <<= 1;
		fa.resize(n), fb.resize(n);
		
		good_realisation(fa, false);

		good_realisation(fb, false);

		for (int i = 0; i < n; ++i)
			fa[i] *= fb[i];
		good_realisation(fa, true);

		res.resize(n);
		for (int i = 0; i < n; ++i)
			res[i] = int(fa[i].real() + 0.5);
		
		int buffer[range] = {time, result};
 		pvm_initsend(PvmDataRaw);
 		pvm_pkint(buffer, range, 1);
 		pvm_send(pvm_parent(), 1);
}



int main(int argc, char** argv) {
 int wr = pvm_mytid();
 int cnt = get_tasks_count(argc, argv);
 good_multiplication(wr, cnt);
 pvm_exit();
}
