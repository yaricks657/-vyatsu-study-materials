
Страусовый алгоритм. Если не замечать проблему, то может она и не возникнет. Никаких методов не используется для борьбы с тупиками.
В чем суть борьбы с тупиками - выделить ресурс, который мы можем предоставить нескольким процессам.
Суть обхода тупиков - что при кажом запросе процесса на предоставление ему ресурса система проверяет сможет ли этот процесс завершиться еслли ему этот ресурс предоставить. Посмотреть, что такое концепция безопасных состояний.

При использовании метода обхода тупиков, система должна уметь решать является ли предоставление ресурса безопасным и только в этом случае предоставлять ресурс процессу. Если заранее булет доступна опредеоенная инфомрация можно избежать тупиков. Основные алгоритмы обхода тупиков базируются на концепции безопасных состояний. Говорят, что состояние системы безопасно, если никакие процессы не назодятся в тупике и сущестует некоторый порядок планирования, при котором каждый процесс может работать до завершения даже если все процессы вдруг захотят немедленно получить своё максимальное количество ресурсов. Небезопансое состояние само по себе не является тупиком, а разница между безопасным и небезопасным состоянием заключается в следующем: в безопасном состоянии система может гарантировать, что все процессы закончат свою работу, а в небезопасном состоянии такой гарантии дать нельзя.

Обход тупиков - проверяет безопасное состояние или небезопасное. Всегда спрашивает как проверяет? П ри выделении ресурсов процесс может завершиться. Если системе хватит ресурсов для завершения процессов, то все хорошо, если нет, то все плохо.

Постоянное количество процессов в системе - проблема алгоритма банкира

чтобы выделить ресурсы система сравнивает больше ли 5 3 - так не говорить. Говорить количество выделенных ресурсов вместо чисел

Завершается, когда находит цикл или завершаестся, когда показывает. что циклов в этом гарфе не существует. Здесь использувется 1 структруа данных список узлов L. Во время работы алгоритма на ребрах графа ставится метка, говорящая о том, что это ребро уже проверено и это делается для того, чтобы избежать повторной проверки. Для каждого узла N в графе выполняется 5 шагов, где N является начальным узлом. 1-е: задаются начальные условия. L пустой список все ребра немаркированы. 2-е: Текущий узел добавляется в конец списка L и проверяется количесттво появлений узла в списке. Если узел присутствует в двух местах, граф содержит цикл, записанный в список L  и работа алгоритма завершается. 3-е: для заданного узла определяется выходит ли из него хотя бы одно немаркированное ребро. если да, то выполняется переход к следующему шагу, если нет, то переход к шагу 5. 4-е: случайным образом выбирается любое немаркированное исходящее ребро и помечается.  затем по этому ребру выполняется переход к ноовому текущему узлу и возврат к шагу 2. 5-е: удаляем посдледний узел из списка и возвращаемся к предыдущему узлу. если это первоначальный узел шраф не содержит циклов и алгоритм завершается. этот алгоритм по очереди берет каждый узел в качестве корня дерева и выполняеет в дереве поиск в глубину. если в процессе обхода алгоритм возвращается к уже встречавшемуся узлу, то он нашел цикл. если алгоритм обходит все ребра из какого-нибудь заданного узла, то он возвращается к предыдущему узлу. если он возвращается к корню и не может идти дальше, то подграф текущего узла не содержит циклов. если даноне сввойство сохраняется для всех узлов, то полный граф не содержит циклов, а система не заблокирована. 

При наличии нескольких экземпляров каждого ресурса алгоритм обнаружения взаимоблокировок основан на сравнеии векторов. Вектор А меньше или равен вектору В тогда и только тогда, когда каждый элемент вектора А меньше или равен соотвествубщему элемменту вектора в. В исходном полодении все процессы немаркированы по мере продвижения алгоритма на процессы ставится отметка, служащая признаком того, что они могут закончить свою работу и следовательно не находятся в тупике. После завершения алгоритма оказывается, что любой немаркированный процесс находистя в тупиковой ситуации. Алгоритм обнаружения тупиков состоит из следующих шагов: ищем немаркированный процесс Pi, для которого i-я строка матрицы запроса меньше или равна вектору доступных ресурсов. Если такой процесс найден, i-я строка матрицы текущего распределения прибавляется к вектору А. Если таких процессов не существует, работа алгоритма заканчивается и все немаркированные процессы находятся в тупике. На первом шаге алгоритм ищет процесс, который может доработать до конца. Такой процесс характеризуется тем, что все требуемые для него ресурсы должны находиться среди доступных в данный момент ресурсов. Тогда выбранный процесс проработает до своего завершения и после этого вернет ресурсы, которые он занимал в список доступных ресурсов. Затем процесс маркируется как законченый. Если окажется, что все процессы могут работать, тогда ни один из нихв данный момент не заблокирован.Если некоторые из процессов не могут запуститься, то они попали в тупик.

Восстанавливать систему после обнаружения тупика можно разными методами: 1-е - восстановление при помощи приндительной выгрузки ресурса. Всегда можно временно отобрать ресурсу его текущего владельца и отдать его другому процессу. Способность забирать ресурс у процесса, отдавать его другому процессу, а затем возвращать назад, так что исходный процесс этого не замечает, зависит от свойств ресурса. Восстановление через откат: 2-е: заключается в том, что  процессы периодически создают контрольные точки, когда состояние процесса сохраняется в файле и процесс может быть вновь запущен с контрольной точки. Когда обнаружена взаимоблокировка, достаточно просто понять, какие ресурсы нужны процессам. Чтобы выйти из тупика процесс занимающий необходимый ресурс откатывается к тому моменту, перед которым он получил данный ресурс для чего запускается одна из его контрольных точек. Вся работа, выполненная после этой контрольной точки теряется. Если возобновленный процесс снова пытается полчить данный ресурс, ему придется ждать того момента, когда ресурс опять станет доступным.Такие КТ нужны для программ, которые используются долго  или выполняются.
3-е: восстановление путем уничтожения процессов. Простейший способ выхода из ситуации взаимоблокировки заключается в уничтожении одного или нескольких процессов.Можно уничтожить процесс, находящийся в цикле взаимоблокировки, если первое удаление не помогает, процедура выполняется до тех пор, пока цикл не будет разорван. Можно в качестве жертвы выбрать процесс, не находящийся в цикле, чтобы он освободил свои ресурсы. Обычно выбирается процесс, который занимает ресурсы, требуемые некоторым процессам в цикле. Тут желательно уже ручное вмешательство.