В ходе решения задача решается несколькими потоками, которые периодически находятся в ожидающем сосстоянии. Таким образом, в процессе работы приложения происходит приостановка и возобновление работы потоков. 
При создании потока в соответствующем объекте ядра инициируется счётчик простоев. Он инициируется либо нулевым значением, либо значением собстным. В зависимости от этого ОС воспринимает поток как записываемый в очередь на бработку, либо как поток простоев. По умолчанию счётчик простоев инициализируется единичным значением. Независимо от того, сказано это в криейте или нет. В состоянии простоя поток находится до полного завершения инициализации. По завершению инициализации ОС проверяет флаг suspend и если он установлен, то оставляет поток в приостановленном состоянии. В противном случае счётчик простоя обнуляется и соответствующий поток включается очередь планируемый на исполнение. Поток может быть оставлен в приостановленном состоянии, если требуются его доп. настройки из программы.() (пример:установка приоритета потока). Как птолько настройки потока завершаются, он идёт на исполнение, для этого вызывается функция resumethread. В качестве параметров передается ... потока, который быз возвращен при создании. В ходе свое	 работы любоый поток может приостановить другой поток, если ему известен описатель потока. Для этого вызывается функция SuspendThread, где указывается указатель.
Каждый поток может быть остановлен не более чем max_suspend_count раз. Она задается системой.
Остановить работу потока - вызвать функцию sleep(). Вызов её внутри потока сообщет OC о том, что потоку не следует выделять процессоврное время в течение заданного промежутка времени.В качестве параметра указывается либо inf, 0, либо параметр.
Поток можно остановить в ожидании получения какого-либо сигнала. Для этого может использоваться функция WaitForSignalObject. Она приостанавлиет работу текущего потока до завершения работы с указанным оуказателем. Можно регулировать время ожидания с помощью параметра dwMilliseconds. 
В некотором случае необходимо дождаться завершения нескольких потоков. WaitForMultiplyObjects.
Любой из Wait называют барьерной синхронизацией.
Приостановка работы заданного потока до завершения работы другого потока. 
Синхронизация - это установка правил взаимодействия параллельно работающих потоков, заставляющих запускать либо приостанавливать какие-либо из них для ограничения доступа к ресурсу либо обесепчения правильной работы алгоритма.
Для организации эксклюзивного доступа к ресурсам используют объекты синхронизации.
Объекты синхронизации:Мьютексы, критические секции, События  и симафоры.
Мьютекс - это объект ядра, который создается функцией создания мьютекса идоступен всем потокам, которым известен его описатель. Мьютекс может находится в одном из двух состояний: занятом или свободном. Мьютекс называют объектом взаимного исключения. Мьютексом хорошо защищать еденичный ресурс от одновременного обращения к нему из разных потоков.
Как только поток, использующий ресурс, осовбождает поток, он должен вызвать функцию релизмьюткс, что позволит мьютекс перейти в состояние свободно.
Объект мьютекс не имеет очереди. его еще называют взаимным исключением.
Потоки получают доступ к критическому ресурсу в порядке предоставления процессоврного времени.
Симофор - объект ядра, ограничивающий дуоступ к единственному критическому ресурсу,н но в отличие от мьютекса он допускает доступ к критическому ресурсу нескольким потокам одноврееменно. Для этого у симофора есть счётчик, который инкрементируется всякий раз, когда поток выходит от критического ресурса и декрементируется, когда поток заходит за симофор.
Существует 2 основные симофорные операции байт и релиз.
wwhile - поток, у симофора анализирует значение счётчика, если значение превышает пороговое(0), то поток помещается в очередь перед симофором.